name: redisedge
base: core18
adopt-info: version
summary: The Edge Computing Data Service for the IoT Edge
description: |
  RedisEdge from Redis Labs is a purpose-built, multi-model database for the demanding conditions at
  the Internet of Things (IoT) edge. It can ingest writes at speed with <1ms latency and
  a very small footprint (<5MB), so it easily resides in constrained compute environments. It can run
  on a variety of edge devices and sensors ranging from ARM32 to x64-based hardware. RedisEdge bundles
  open source Redis (version 5 with Redis Streams) with the RedisAI and RedisTimeSeries modules, along
  with RedisGears for inter-module communication.
icon: snap/local/assets/1_Redis-labs-logoRGB.png

epoch: 0

# TODO: add armhf here when that's supported
architectures:
  - build-on: amd64

# for start-timeout, we need snapd 2.38
# we need command-chain for the hooks too
assumes: [snapd2.38, command-chain]

# Ideally snapcraft would generate this command-chain spec for the hooks
# automatically, but that doesn't currently work, see
# https://bugs.launchpad.net/snapd/+bug/1824255
# In the meantime, make sure that the snapcraft-runner gets generated by 
# the apps by specifying the full adapter in at least one of the apps, and 
# manually craft the command-chain for the configure hook here to passthrough
# to the snap.yaml
# All of this is necessary so we can use jq and other tools from inside the 
# snap in the configure and install hooks
passthrough:
  hooks:
    configure:
      command-chain:
      - snap/command-chain/snapcraft-runner
    install:
      command-chain:
      - snap/command-chain/snapcraft-runner

grade: stable
confinement: strict

apps:
  redis:
    adapter: full
    command: bin/redis-server --loadmodule /opt/redislabs/lib/modules/redistimeseries.so --loadmodule /opt/redislabs/lib/modules/redisgears.so $SNAP_DATA/redis/redis.conf
    daemon: simple
    plugs: [network, network-bind]

  # helper commands the snap exposes
  redis-cli:
    adapter: full
    command: bin/redis-cli
    plugs: [home, removable-media, network]
  curl:
    adapter: full
    command: usr/bin/curl
    plugs: [network]
  jq:
    adapter: full
    command: usr/bin/jq
    plugs: [home, removable-media]

parts:
  version:
    plugin: nil
    source: .
    override-pull: |
      snapcraftctl set-version $(cat $SNAPCRAFT_PROJECT_DIR/VERSION)-$(date +%Y%m%d)+$(git rev-parse --short HEAD)

  curl:
    plugin: nil
    # the default source for a part that doesn't specify one is ".", which
    # then means snapcraft will scan the full git directory here and determine
    # that if anything changed, i.e. the config-common parts with
    # actual scripts, etc. this part also gets marked out of date too and needs
    # rebuilding, even though this part really only depends on a stage-package
    # to resolve this we can just specify the source of something that changes
    # infrequently and will minimize unnecessary part re-building by snapcraft
    source: snap/local/build-helpers
    stage-packages:
      - curl
  
  jq:
    plugin: nil
    source: snap/local/build-helpers
    stage-packages:
      - jq

  config-common:
    plugin: dump
    source: snap/local/runtime-helpers

  redis:
    source: https://github.com/antirez/redis.git
    source-tag: "5.0.4"
    source-depth: 1
    plugin: make
    make-install-var: PREFIX
    build-packages:
      - build-essential
    override-build: |
      snapcraftctl build
      # process the config file to specify the working directory for redis
      # as $SNAP_DATA/redis
      cd $SNAPCRAFT_PART_SRC
      mkdir -p $SNAPCRAFT_PART_INSTALL/config/redis
      sed -e s@'dir ./'@'dir \$SNAP_DATA/redis'@ \
        redis.conf > $SNAPCRAFT_PART_INSTALL/config/redis/redis.conf

  redistimeseries:
    source: https://github.com/RedisTimeSeries/RedisTimeSeries.git
    source-tag: v1.0.3
    source-depth: 1
    plugin: nil
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      ./deps/readies/bin/getpy2
      ./system-setup.py
      make fetch
      make build
      install -DT "bin/linux-x64-release/redistimeseries.so" \
                  "$SNAPCRAFT_PART_INSTALL/opt/redislabs/lib/modules/redistimeseries.so"

  redisgears:
    source: https://github.com/RedisGears/RedisGears.git
    source-tag: v0.4.0
    source-depth: 1
    plugin: nil
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      ./deps/readies/bin/getpy2
      ./system-setup.py
      make fetch
      make PATH=$PATH:/root/parts/redis/install/bin all
      install -DT "bin/linux-x64-release/redisgears.so" \
                  "$SNAPCRAFT_PART_INSTALL/opt/redislabs/lib/modules/redisgears.so"
      tar xzf ./artifacts/release/redisgears-dependencies.*.tgz -C $SNAPCRAFT_PART_INSTALL

  redisai:
    source: https://github.com/RedisAI/RedisAI.git
    source-tag: v0.3.2
    source-depth: 1
    plugin: nil
    build-attributes: [keep-execstack]
    override-build: |
      cd $SNAPCRAFT_PART_SRC
      ./opt/readies/bin/getpy
      ./opt/system-setup.py
      ./get_deps.sh cpu
      make -C opt build
      cd bin/linux-x64-cpu/install && \
        find . -type f -exec install -DT {} /root/parts/redisai/install/opt/redislabs/lib/modules/{} \;
    stage-packages:
      - libgomp1

